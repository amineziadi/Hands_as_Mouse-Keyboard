#Importing section
import cv2
import mediapipe as mp
import time
import uuid
import os
from time import sleep
import math

#VideoCapture and Resolution select
cap = cv2.VideoCapture(0)
cap.set(3, 1280)
cap.set(4, 720)

#Detect and prepare to draw hands
mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils


#Define a drawAll function to draw
def drawALL(img, buttonList):
    for button in buttonList:
        x, y = button.pos
        w, h = button.size
        cv2.rectangle(img, button.pos, (x + w, y + h), (102, 0, 102), cv2.FILLED)
        cv2.putText(img, button.text, (x + 20, y + 65), cv2.FONT_HERSHEY_PLAIN, 4, (255,255,255), 4)
    return img

#Define a Button class to draw keyboard caracteres
class Button():
    def __init__(self, pos, text, size=[85, 85]):
        self.pos = pos
        self.text = text
        self.size = size

#Prepare the keys list as 2 dimension array
keys = [["Q","W","E","R","T","Y","U","I","O","P"],
        ["A","S","D","F","G","H","J","K","L",";"],
        ["Z","X","C","V","B","N","M",",",".","/"]]

#Prepare the buttonlist array
buttonList = []

#Printing the keys in the video
for i in range(len(keys)):
        for j, key in enumerate (keys[i]):
            buttonList.append(Button([100 * j + 50,100 * i + 50] ,key))

#Prepare the output text from keyboard
finalText = ""

while True:
    success, img = cap.read()
    
    #Image color correction 
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)
    
    #Saving the detected hands in res variable
    res = results.multi_hand_landmarks

    #Draw the button list
    drawALL(img, buttonList)
    
    #Test if the hands detected than the works start
    if res:
        
        for button in buttonList:
        
            x, y = button.pos
            w, h = button.size

            #Saving the points of the hand positions
            x1 = res[0].landmark[8].x*1280
            x2 = res[0].landmark[12].x*1280
            y1 = res[0].landmark[8].y*720
            y2 = res[0].landmark[12].y*720
            
            #If the finger move on a button than the button change the color
            if x < (res[0].landmark[8].x * 1280) < x+w and y < (res[0].landmark[8].y * 720) < y+h :
                cv2.rectangle(img, button.pos, (x + w, y + h), (0, 102, 0), cv2.FILLED)
                cv2.putText(img, button.text, (x + 20, y + 65), cv2.FONT_HERSHEY_PLAIN, 4, (255,255,255), 4)
                d = math.sqrt(abs((x2-x1)**2+(y2-y1)**2))
                print(d)
                if d < 40:
                    cv2.rectangle(img, button.pos, (x + w, y + h), (0, 0, 0), cv2.FILLED)
                    cv2.putText(img, button.text, (x + 20, y + 65), cv2.FONT_HERSHEY_PLAIN, 4, (255,255,255), 4)
                    finalText += button.text
                    sleep(0.2)
                    
    #Show a zone for text typed
    cv2.rectangle(img, (50, 350), (700, 450), (175, 0, 175), cv2.FILLED)
    cv2.putText(img, finalText, (60, 425), cv2.FONT_HERSHEY_PLAIN, 5, (255,255,255), 5)
 
    #Show the hand forme
    if results.multi_hand_landmarks:
        for handlms in results.multi_hand_landmarks:
            mpDraw.draw_landmarks(img, handlms, mpHands.HAND_CONNECTIONS)        
    cv2.imshow("Image", img)
    cv2.waitKey(1)
    
